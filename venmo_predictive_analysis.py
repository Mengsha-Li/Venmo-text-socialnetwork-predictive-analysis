# -*- coding: utf-8 -*-
"""Venmo_predictive_analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BwC7qUJouefqWoVAK1VSTjVnjlV73ggT
"""

import findspark
findspark.init()
import pyspark
from pyspark import SparkContext
from pyspark.sql import SQLContext
from pyspark.sql.types import *
from pyspark.sql import SparkSession
import pyspark.sql as sparksql
import pyspark.sql.functions as F

from pyspark.sql.functions import isnan, when, count, col, concat, lit

from pyspark.ml.feature import VectorAssembler,OneHotEncoder,StringIndexer

# Import Venmo data
MAX_MEMORY = '12g'
spark = SparkSession\
        .builder\
        .appName('venmo')\
        .config("spark.driver.memory", MAX_MEMORY) \
        .getOrCreate()
venmo=spark.read.parquet('VenmoSample.snappy.parquet')
venmo.show(100)

"""### create the dependent variable Y , i.e. the total number of transactions at lifetime point 12."""

# create DataFrame as a temporary view
venmo.createOrReplaceTempView('table')

user_transaction=spark.sql('select user1, user2, transaction_type, datetime from table order by user1,datetime')

# Change the datetime to month 
t = user_transaction.selectExpr("user1","user2",\
                                "CAST( MONTHS_BETWEEN(datetime, FIRST_VALUE(datetime)\
                                OVER (PARTITION BY user1 ORDER BY datetime)) as INT) as month")
t.show()

# Filter the 0-12 month
user_transaction12 = t.filter(F.col('month')<=12)

user_transaction12.groupBy('user1').count().show()

y = user_transaction12.groupBy('user1').count()

"""### Create the recency and frequency variables."""

# Change the datetime to month 
t = user_transaction.selectExpr("user1","user2",\
                                "CAST( MONTHS_BETWEEN(datetime, FIRST_VALUE(datetime)\
                                OVER (PARTITION BY user1 ORDER BY datetime)) as INT) as month", "datetime")
t.show()

t1 = t.selectExpr("user1","month","30 - DAY(datetime)")

recency = t1.groupBy("user1","month").agg(F.max("(30 - DAY(datetime))"))

recency = recency.filter(F.col('month')<=12)

recency.withColumnRenamed('max((30 - DAY(datetime)))','recency').show()

recency= recency.withColumnRenamed('max((30 - DAY(datetime)))','recency')

t2 = t.selectExpr("user1","month")

frequency = t2.groupBy("user1","month").agg(((count('*')/30).alias('frequency')))

frequency = frequency.filter(F.col('month')<=12)
frequency.show()

"""### For each userâ€™s lifetime point, regress her social network metrics and the spending behavior of her social network on Y."""

def mon_reg_spd_social(i):
    """i is the month, ranging from 0 to 11""" 
    profile = user_profile_yearly.where(col('month')==i)
    m0_social = social.where(col('month')==i)
    m0_data = profile.join(y,'user1')
    m0_data = m0_data.join(m0_social, 'user1')
    vectorAssembler = VectorAssembler(inputCols = ['Cash','Event', 'Food',\
                                                   'Illegal','People','Trans','Travel','Utility',\
                                                  'friends','mutual_friends','ClusteringCoef'], outputCol = 'features')
    m0_df = vectorAssembler.transform(m0_data)
    m0_df = m0_df.select(['features', 'count'])
    lr = LinearRegression(featuresCol = 'features', labelCol = 'count', maxIter=10)
    m0_lr_model = lr.fit(m0_df)
    m0_MSE = m0_lr_model.summary.rootMeanSquaredError
    return m0_MSE

mse_spd_social = []
for i in range(0,12):
    mse_spd_social.append(mon_reg_spd_social(i))
print(mse_spd_social)

import matplotlib.pyplot as plt 
import pandas as pd

plt.scatter(pd.Series(range(0,12)),mse_spd_social)
# naming the x axis 
plt.xlabel('x - axis - month') 
# naming the y axis 
plt.ylabel('y - axis - MSE') 
  
# giving a title to my graph 
plt.title('MSE over month') 
plt.show()

plt.scatter(pd.Series(range(0,12)),mse_social, label='social network metrics')
plt.scatter(pd.Series(range(0,12)),mse_spd_social, label='social network metrics+spending behavrial')
# naming the x axis 
plt.xlabel('x - axis - month') 
# naming the y axis 
plt.ylabel('y - axis - MSE') 
plt.legend(loc='lower right')  
# giving a title to my graph 
plt.title('MSE over month') 
plt.show()

